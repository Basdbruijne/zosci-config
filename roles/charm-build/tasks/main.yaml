# Install build dependencies for charm builds
- name: Install libpq-dev
  become: true
  apt:
     name: libpq-dev
- name: Install libmysqlclient-dev
  become: true
  apt:
    name: libmysqlclient-dev
# Improvements: use the built charm tarball artifact that's sent to Zuul for
# downloading rather than just knowing the path and using that.
- name: fetch charm
  when: needs_charm_build
  args:
    executable: /bin/bash
  shell: |
    curl -o /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 http://10.245.161.162:80/swift/v1/zuul-built-charms/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 || true
    mkdir -p {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    cd {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    # try to untar the downloaded file and echo our "success" message, but pass on failure
    tar xjf /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 && \
      echo "successfully fetched built {{ charm_build_name }}" || \
      true
  register: fetch_charm

# In the below conditional, we're asking to build the charm with two conditions:
# 1. The charm is a reactive charm that's been configured to build (needs_charm_build)
# 2. We did not successfully fetch a built charm in the step above.
#      The way we're checking if we fetched successfully is to look through the output of
#      the previous command for the string "successfully fetched built" and checking the
#      position of that, as -1 is the value for a not-found in this case.
- name: build charm
  when: needs_charm_build and fetch_charm.stdout.find("successfully fetched built") == -1
  args:
    chdir: "{{ zuul.project.src_dir }}"
  environment: "{{ tox_environment|combine(tox_constraints_env|default({})) }}"
  command: >-
    {{ tox_executable }} -e build
  register: charm_build_output

- name: set built charm path for reactive charms
  when: needs_charm_build and build_type == "reactive"
  set_fact:
    zuul_work_dir: "{{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}"

- name: set built charm path for charmcraft charms
  when: needs_charm_build and build_type == "charmcraft"
  set_fact:
    zuul_work_dir: "{{ zuul.project.src_dir }}"
