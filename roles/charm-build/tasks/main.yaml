# Install build dependencies for charm builds
- name: Install libpq-dev
  become: true
  apt:
     name: libpq-dev
- name: Install libmysqlclient-dev
  become: true
  apt:
    name: libmysqlclient-dev

- name: has func-test-pr
  shell: |
    set -o pipefail
    echo -n {{ zuul.message }} | base64 -d | \
      awk 'tolower($0) ~ /func-test-pr: .*github.*zaza.*pull/ {print $2; exit;}' | \
      rev | cut -sf1,3,4 -d/ | rev
  register: func_test_pr
  args:
    executable: /bin/bash
- name: func-test repo
  when: func_test_pr.rc == 0
  shell: |
    set -o pipefail
    echo {{ func_test_pr.stdout }} | cut -f1-2 -d/
  register: func_pr_repo
  args:
    executable: /bin/bash
- name: Github PR repo
  when: func_pr_repo.rc == 0
  shell: |
    set -o pipefail
    echo {{ func_pr_repo.stdout }} | cut -f2 -d/
  register: github_pr_repo
  args:
    executable: /bin/bash
- name: Github PR org
  when: func_pr_repo.rc == 0
  shell: |
    set -o pipefail
    echo {{ func_pr_repo.stdout }} | cut -f1 -d/
  register: github_pr_org
  args:
    executable: /bin/bash
- name: func-test PR number
  when: func_test_pr.rc == 0
  shell: |
    set -o pipefail
    echo {{ func_test_pr.stdout }} | cut -f3 -d/
  register: func_pr_num
  args:
    executable: /bin/bash
# _github_api_pr_url="https://api.github.com/repos/$_pr_repo/pulls/$_pr_num"
- name: func-test pr label
  when: func_pr_repo.rc == 0
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    curl -s https://api.github.com/repos/{{ func_pr_repo.stdout }}/pulls/{{ func_pr_num.stdout }} | \
    awk '/"head":/ {getline; gsub(/"|,/, ""); print $2}'
  register: func_pr_label_cmd
- name: func-test pr
  when: func_pr_label_cmd.rc == 0
  set_fact:
    func_pr_label: "{{ func_pr_label_cmd.stdout }}"
- name: Github PR login
  when: func_pr_label is defined
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    echo {{ func_pr_label }} | cut -f1 -d:
  register: github_pr_login
- name: Github PR branch
  when: func_pr_label is defined
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    echo {{ func_pr_label }} | cut -f2 -d: | sed -e 's/\//\\\//g'
  register: github_pr_branch

- name: 'handle func-test-pr before build'
  when: github_pr_login.rc == 0
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    GITHUB_PR_REPO="{{ github_pr_repo.stdout }}"
    GITHUB_PR_ORG="{{ github_pr_org.stdout }}"
    GITHUB_PR_LOGIN="{{ github_pr_login.stdout }}"
    GITHUB_PR_BRANCH="{{ github_pr_branch.stdout }}"
    echo "GITHUB_PR_REPO: $GITHUB_PR_REPO"
    echo "GITHUB_PR_ORG: $GITHUB_PR_ORG"
    echo "GITHUB_PR_LOGIN: $GITHUB_PR_LOGIN"
    echo "GITHUB_PR_BRANCH: $GITHUB_PR_BRANCH"
    if [ -n "$GITHUB_PR_LOGIN" -a -n "$GITHUB_PR_BRANCH" ]; then
      for test_requirements_path in "{{ zuul.project.src_dir }}/test-requirements.txt" "{{ zuul.project.src_dir }}/src/test-requirements.txt"; do
        echo
        if [ ! -e "$test_requirements_path" ]; then
          echo "No $test_requirements_path found, skipping..."
          continue
        fi
        sed -i s/${GITHUB_PR_ORG}\\/${GITHUB_PR_REPO}.git/${GITHUB_PR_LOGIN}\\/${GITHUB_PR_REPO}.git@${GITHUB_PR_BRANCH}/ "$test_requirements_path" || true
        echo "New content of ${test_requirements_path}:"
        cat $test_requirements_path || true
      done
    fi

# Improvements: use the built charm tarball artifact that's sent to Zuul for
# downloading rather than just knowing the path and using that.
- name: fetch charm
  when: needs_charm_build
  args:
    executable: /bin/bash
  shell: |
    curl -o /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 http://10.245.161.162:80/swift/v1/zuul-built-charms/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 || true
    mkdir -p {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    cd {{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}
    # try to untar the downloaded file and echo our "success" message, but pass on failure
    tar xjf /tmp/{{ charm_build_name }}-{{ zuul.buildset }}.tar.bz2 && \
      echo "successfully fetched built {{ charm_build_name }}" || \
      true
  register: fetch_charm

# In the below conditional, we're asking to build the charm with two conditions:
# 1. The charm is a reactive charm that's been configured to build (needs_charm_build)
# 2. We did not successfully fetch a built charm in the step above.
#      The way we're checking if we fetched successfully is to look through the output of
#      the previous command for the string "successfully fetched built" and checking the
#      position of that, as -1 is the value for a not-found in this case.
- name: build charm
  when: needs_charm_build and fetch_charm.stdout.find("successfully fetched built") == -1
  args:
    chdir: "{{ zuul.project.src_dir }}"
  environment: "{{ tox_environment|combine(tox_constraints_env|default({})) }}"
  command: >-
    {{ tox_executable }} -e build
  register: charm_build_output

- name: set built charm path
  when: needs_charm_build
  set_fact:
    zuul_work_dir: "{{ zuul.project.src_dir }}/build/builds/{{ charm_build_name }}"

# If the charm has been fetched instead of built, it is necessary to apply the
# func-test-pr here again on build/builds/**/test-requirements.txt
# NOTE(lourot): this won't work for Operator charms, as the build output ends up
# in a different folder, see issue #47.
- name: 'handle func-test-pr on pre-built charm'
  when: github_pr_login.rc == 0 and needs_charm_build and fetch_charm.stdout.find("successfully fetched built") != -1
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    GITHUB_PR_REPO="{{ github_pr_repo.stdout }}"
    GITHUB_PR_ORG="{{ github_pr_org.stdout }}"
    GITHUB_PR_LOGIN="{{ github_pr_login.stdout }}"
    GITHUB_PR_BRANCH="{{ github_pr_branch.stdout }}"
    TEST_REQUIREMENTS_PATH="{{ zuul_work_dir }}/test_requirements.txt"
    if [ -n "$GITHUB_PR_LOGIN" -a -n "$GITHUB_PR_BRANCH" -a -e "$TEST_REQUIREMENTS_PATH"]; then
      sed -i s/${GITHUB_PR_ORG}\\/${GITHUB_PR_REPO}.git/${GITHUB_PR_LOGIN}\\/${GITHUB_PR_REPO}.git@${GITHUB_PR_BRANCH}/ "$TEST_REQUIREMENTS_PATH" || true
      echo "New content of ${TEST_REQUIREMENTS_PATH}:"
      cat $TEST_REQUIREMENTS_PATH || true
    fi
