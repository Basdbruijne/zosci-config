- hosts: all
  tasks:
    - name: has func-test-pr
      shell: |
        set -o pipefail
        echo -n {{ zuul.message }} | base64 -d | \
          awk 'tolower($0) ~ /func-test-pr: .*github.*zaza.*pull/ {print $2; exit;}' | \
          rev | cut -sf1,3,4 -d/ | rev
      register: func_test_pr
      args:
        executable: /bin/bash
    - name: func-test repo
      when: func_test_pr.rc == 0
      shell: |
        set -o pipefail
        echo {{ func_test_pr.stdout }} | cut -f1-2 -d/
      register: func_pr_repo
      args:
        executable: /bin/bash
    - name: Github PR repo
      when: func_pr_repo.rc == 0
      shell: |
        set -o pipefail
        echo {{ func_pr_repo.stdout }} | cut -f2 -d/
      register: github_pr_repo
      args:
        executable: /bin/bash
    - name: Github PR org
      when: func_pr_repo.rc == 0
      shell: |
        set -o pipefail
        echo {{ func_pr_repo.stdout }} | cut -f1 -d/
      register: github_pr_org
      args:
        executable: /bin/bash
    - name: func-test PR number
      when: func_test_pr.rc == 0
      shell: |
        set -o pipefail
        echo {{ func_test_pr.stdout }} | cut -f3 -d/
      register: func_pr_num
      args:
        executable: /bin/bash
    # _github_api_pr_url="https://api.github.com/repos/$_pr_repo/pulls/$_pr_num"

    - name: func-test pr label
      when: func_pr_repo.rc == 0
      args:
        executable: /bin/bash
      shell: |
        set -o pipefail
        curl -s https://api.github.com/repos/{{ func_pr_repo.stdout }}/pulls/{{ func_pr_num.stdout }} | \
        awk '/"head":/ {getline; gsub(/"|,/, ""); print $2}'
      register: func_pr_label_cmd
    - name: func-test pr
      when: func_pr_label_cmd.rc == 0
      set_fact:
        func_pr_label: "{{ func_pr_label_cmd.stdout }}"

    - name: Github PR login
      when: func_pr_label is defined
      args:
        executable: /bin/bash
      shell: |
        set -o pipefail
        echo {{ func_pr_label }} | cut -f1 -d:
      register: github_pr_login
    - name: Github PR branch
      when: func_pr_label is defined
      args:
        executable: /bin/bash
      shell: |
        set -o pipefail
        echo {{ func_pr_label }} | cut -f2 -d: | sed -e 's/\//\\\//g'
      register: github_pr_branch

    - name: 'handle func-test-pr'
      when: github_pr_login.rc == 0
      args:
        executable: /bin/bash
      shell: |
        set -o pipefail
        GITHUB_PR_REPO="{{ github_pr_repo.stdout }}"
        GITHUB_PR_ORG="{{ github_pr_org.stdout }}"
        GITHUB_PR_LOGIN="{{ github_pr_login.stdout }}"
        GITHUB_PR_BRANCH="{{ github_pr_branch.stdout }}"
        echo "GITHUB_PR_REPO: $GITHUB_PR_REPO"
        echo "GITHUB_PR_ORG: $GITHUB_PR_ORG"
        echo "GITHUB_PR_LOGIN: $GITHUB_PR_LOGIN"
        echo "GITHUB_PR_BRANCH: $GITHUB_PR_BRANCH"
        if [ -n "$GITHUB_PR_LOGIN" -a -n "$GITHUB_PR_BRANCH" ]; then
          # NOTE(lourot): if the charm has been downloaded by the charm-build
          # role, sed needs to be used directly on
          # build/builds/**/test-requirements.txt or it won't have any effect,
          # since no charm build will happen.
          # NOTE(lourot): this won't work for Operator charms, as the build
          # output ends up in a different folder, see issue #47.
          CHARM_DIR="/home/ubuntu/{{ zuul.project.src_dir }}"
          CHARM_BUILD_NAME="{{ zuul.project.src_dir | replace('charm-', '') }}"
          CHARM_BUILD_DIR="${CHARM_DIR}/build/builds/${CHARM_BUILD_NAME}"
          for test_requirements_path in "${CHARM_DIR}/test-requirements.txt" "${CHARM_DIR}/src/test-requirements.txt" "${CHARM_BUILD_DIR}/test-requirements.txt"; do
            echo
            if [ ! -e "$test_requirements_path" ]; then
              echo "No $test_requirements_path found, skipping..."
              continue
            fi
            sed -i s/${GITHUB_PR_ORG}\\/${GITHUB_PR_REPO}.git/${GITHUB_PR_LOGIN}\\/${GITHUB_PR_REPO}.git@${GITHUB_PR_BRANCH}/ "$test_requirements_path" || true
            echo "New content of ${test_requirements_path}:"
            cat $test_requirements_path || true
          done
        fi
    - name: hack around juju's reluctance to deploy misnamed directories
      copy:
        src: "/home/ubuntu/{{ zuul.project.src_dir }}/"
        dest: "/home/ubuntu/{{ zuul.project.src_dir | replace('charm-', '') }}"
        remote_src: yes
    - name: 'install crashdump'
      become: true
      snap:
        name: juju-crashdump
        classic: yes
    # Setup Juju
    - name: 'install juju'
      become: true
      snap:
        name: juju
        classic: yes
        channel: 2.8/stable
    - name: Install libpq-dev
      become: true
      apt:
         name: libpq-dev
    - name: Install libmysqlclient-dev
      become: true
      apt:
        name: libmysqlclient-dev
    - name: Install libxml2-dev
      become: true
      apt:
        name: libxml2-dev
    - name: Install libxslt1-dev
      become: true
      apt:
        name: libxslt1-dev
    - name: Render juju clouds.yaml
      template:
        src: clouds.yaml.j2
        dest: clouds.yaml
    - name: Add cloud
      command: /snap/bin/juju add-cloud --client {{ serverstack_cloud.region_name }} clouds.yaml
    - name: 'render credentials.yaml'
      template:
        src: credentials.yaml.j2
        dest: credentials.yaml
    - name: Add credential
      command: /snap/bin/juju add-credential {{ serverstack_cloud.region_name }} --client -f credentials.yaml
    - name: Clone charm-test-infra
      command: git clone https://github.com/openstack-charmers/charm-test-infra /tmp/charm-test-infra
    - name: 'Bootstrap Controller'
      command: |
        /snap/bin/juju bootstrap \
          --bootstrap-constraints="virt-type=kvm cores=4 mem=8G" \
          --constraints=virt-type=kvm \
          --auto-upgrade=false \
          --model-default=/tmp/charm-test-infra/juju-configs/model-default-serverstack.yaml \
          --config=/tmp/charm-test-infra/juju-configs/controller-default.yaml \
          {{ serverstack_cloud.region_name }}/{{ serverstack_cloud.region_name }}
